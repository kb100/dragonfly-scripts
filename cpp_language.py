from dragonfly import *


class CPlusPlusRule(MappingRule):
    mapping = {
        "assign": Text(" = "),
        "(eek|equal|equals)": Text(" == "),
        "arrow": Text('->'),
        'semi': Text(';'),

        'align as': Text('alignas'),
        'align of': Text('alignof'),
        'and': Text('&&'),
        'and (eek|equal)': Text('&='),
        '(A S M|assembly)': Text('asm'),
        'atomic cancel': Text('atomic_cancel'),
        'atomic commit': Text('atomic_commit'),
        'atomic noexcept': Text('atomic_noexcept'),
        'auto': Text('auto'),
        '(bit and|ref)': Text('&'),
        'bit or': Text('|'),
        'bool': Text('bool'),
        'break': Text('break;'),
        'case': Text('case :') + Key('left'),
        'catch': Text('catch'),
        'char': Text('char'),
        'char eight T': Text('char8_t'),
        'char sixteen T': Text('char16_t'),
        'char thirty two T': Text('char32_t'),
        'class': Text('class'),
        '(tilde|compl)': Text('~'),
        'concept': Text('concept'),
        'const': Text('const'),
        'const eval': Text('consteval'),
        'const expr': Text('constexpr'),
        'const init': Text('constinit'),
        'const cast': Text('const_cast'),
        'continue': Text('continue'),
        'co await': Text('co_await'),
        'co return': Text('co_return'),
        'co yield': Text('co_yield'),
        'deckle type': Text('decltype'),
        'default': Text('default'),
        '(Dell|delete)': Text('delete'),
        'do': Text('do'),
        'double': Text('double'),
        'dynamic cast': Text('dynamic_cast'),
        'else': Text('else'),
        '(E num|enum)': Text('enum'),
        'explicit': Text('explicit'),
        'export': Text('export'),
        'extern': Text('extern'),
        'false': Text('false'),
        'float': Text('float'),
        'for': Text('for ()') + Key('left'),
        'friend': Text('friend'),
        'go to': Text('goto'),
        'if': Text('if ()') + Key('left'),
        'inline': Text('inline'),
        'int': Text('int'),
        'long': Text('long'),
        'mutable': Text('mutable'),
        'name space': Text('namespace'),
        'new': Text('new'),
        'no except': Text('noexcept'),
        'not': Text('!'),
        'not (eek|equal)': Text('!='),
        'null (pointer|putter|P T R)': Text('nullptr'),
        'operator': Text('operator'),
        'or': Text('||'),
        'or (eek|equal)': Text('|='),
        'private': Text('private'),
        'protected': Text('protected'),
        'public': Text('public'),
        'reflex purr': Text('reflexpr'),
        'register': Text('register'),
        'reinterpret cast': Text('reinterpret_cast'),
        'requires': Text('requires'),
        'return': Text('return ;') + Key('left'),
        'return void': Text('return;'),
        'short': Text('short'),
        'signed': Text('signed'),
        'size of': Text('sizeof'),
        'static': Text('static'),
        'static assert': Text('static_assert'),
        'static cast': Text('static_cast'),
        'struct': Text('struct'),
        'switch': Text('switch'),
        'synchronized': Text('synchronized'),
        'template': Text('template'),
        'this': Text('this'),
        'thread local': Text('thread_local'),
        'throw': Text('throw'),
        'true': Text('true'),
        'try': Text('try'),
        'type def': Text('typedef'),
        'type (I D|id)': Text('typeid'),
        'type name': Text('typename'),
        'union': Text('union'),
        'unsigned': Text('unsigned'),
        'using': Text('using'),
        'virtual': Text('virtual'),
        'void': Text('void'),
        'volatile': Text('volatile'),
        '(W|dub|wide) char T': Text('wchar_t'),
        'while': Text('while ()')+Key('left'),
        'ex or': Text('^'),
        'ex or (eek|equal)': Text('^='),

        'final': Text('final'),
        'override': Text('override'),
        'transaction safe': Text('transaction_safe'),
        'transaction safe dynamic': Text('transaction_safe_dynamic'),

        '(standard|stid|stud|S T D)': Text('std'),
        'star': Text('*'),
        '(box|scope|global)': Text('::'),

        # 'if': Text('if'),
        '(L if|el if|elif)': Text('elif'),
        # 'else': Text('else'),
        'end if': Text('#endif'),
        'if def': Text('#ifdef '),
        'if N def': Text('#ifndef '),
        'define': Text('#define '),
        'undef': Text('#undef '),
        'include': Text('#include '),
        'line': Text('#line '),
        'error': Text('#error '),
        'pragma': Text('#pragma '),
        'defined': Text('#defined '),
        'has include': Text('#__has_include '),
        'has C P P attribute': Text('#__has_cpp_attribute '),

        # 'export': Text('export'),
        'import': Text('import'),
        'module': Text('module'),

        'I oh stream': Text('iostream'),
        '(arg|are) C': Text('argc'),
        '(arg|are) V': Text('argv'),
        'C out': Text('cout'),

    }
